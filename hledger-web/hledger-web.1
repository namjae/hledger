
.TH "HLEDGER\-WEB" "1" "April 2024" "hledger-web-1.33 " "hledger User Manuals"



.SH NAME
hledger\-web \- robust, friendly plain text accounting (Web version)
.SH SYNOPSIS
\f[CR]hledger\-web    [\-\-serve|\-\-serve\-api] [OPTS] [ARGS]\f[R]
.PD 0
.P
.PD
\f[CR]hledger web \-\- [\-\-serve|\-\-serve\-api] [OPTS] [ARGS]\f[R]
.SH DESCRIPTION
This manual is for hledger\[aq]s web interface, version 1.33.
See also the hledger manual for common concepts and file formats.
.PP
hledger is a robust, user\-friendly, cross\-platform set of programs for
tracking money, time, or any other commodity, using double\-entry
accounting and a simple, editable file format.
hledger is inspired by and largely compatible with ledger(1), and
largely interconvertible with beancount(1).
.PP
hledger\-web is a simple web application for browsing and adding
transactions.
It provides a more user\-friendly UI than the hledger CLI or hledger\-ui
TUI, showing more at once (accounts, the current account register,
balance charts) and allowing history\-aware data entry, interactive
searching, and bookmarking.
.PP
hledger\-web also lets you share a journal with multiple users, or even
the public web.
There is no access control, so if you need that you should put it behind
a suitable web proxy.
As a small protection against data loss when running an unprotected
instance, it writes a numbered backup of the main journal file (only) on
every edit.
.PP
Like hledger, it reads from (and appends to) a journal file specified by
the \f[CR]LEDGER_FILE\f[R] environment variable (defaulting to
\f[CR]$HOME/.hledger.journal\f[R]); or you can specify files with
\f[CR]\-f\f[R] options.
It can also read timeclock files, timedot files, or any CSV/SSV/TSV file
with a date field.
(See hledger(1) \-> Input for details.)
.PP
hledger\-web can be run in three modes:
.IP \[bu] 2
Transient mode (the default): your default web browser will be opened to
show the app if possible, and the app exits automatically after two
minutes of inactivity (no requests received and no open browser windows
viewing it).
.IP \[bu] 2
With \f[CR]\-\-serve\f[R]: the app runs without stopping, and without
opening a browser.
.IP \[bu] 2
With \f[CR]\-\-serve\-api\f[R]: only the JSON API is served.
.PP
In all cases hledger\-web runs as a foreground process, logging requests
to stdout.
.SH OPTIONS
hledger\-web provides the following options:
.TP
\f[CR]\-\-serve\f[R]
serve and log requests, don\[aq]t browse or auto\-exit after timeout
.TP
\f[CR]\-\-serve\-api\f[R]
like \-\-serve, but serve only the JSON web API, not the web UI
.TP
\f[CR]\-\-allow=view|add|edit\f[R]
set the user\[aq]s access level for changing data (default:
\f[CR]add\f[R]).
It also accepts \f[CR]sandstorm\f[R] for use on that platform (reads
permissions from the \f[CR]X\-Sandstorm\-Permissions\f[R] request
header).
.TP
\f[CR]\-\-cors=ORIGIN\f[R]
allow cross\-origin requests from the specified origin; setting ORIGIN
to \[dq]*\[dq] allows requests from any origin
.TP
\f[CR]\-\-host=IPADDR\f[R]
listen on this IP address (default: 127.0.0.1)
.PP
By default the server listens on IP address \f[CR]127.0.0.1\f[R], which
is accessible only to requests from the local machine..
You can use \f[CR]\-\-host\f[R] to listen on a different address
configured on the machine, eg to allow access from other machines.
The special address \f[CR]0.0.0.0\f[R] causes it to listen on all
addresses configured on the machine.
.TP
\f[CR]\-\-port=PORT\f[R]
listen on this TCP port (default: 5000)
.PP
Similarly, you can use \f[CR]\-\-port\f[R] to listen on a TCP port other
than 5000.
This is useful if you want to run multiple hledger\-web instances on a
machine.
.TP
\f[CR]\-\-socket=SOCKETFILE\f[R]
listen on the given unix socket instead of an IP address and port (unix
only; implies \-\-serve)
.PP
When \f[CR]\-\-socket\f[R] is used, hledger\-web creates and
communicates via a socket file instead of a TCP port.
This can be more secure, respects unix file permissions, and makes
certain use cases easier, such as running per\-user instances behind an
nginx reverse proxy.
(Eg:
\f[CR]proxy_pass http://unix:/tmp/hledger/${remote_user}.socket;\f[R].)
.TP
\f[CR]\-\-base\-url=URL\f[R]
set the base url (default: http://IPADDR:PORT).
.PP
You can use \f[CR]\-\-base\-url\f[R] to change the protocol, hostname,
port and path that appear in hledger\-web\[aq]s hyperlinks.
This is useful eg when integrating hledger\-web within a larger website.
The default is \f[CR]http://HOST:PORT/\f[R] using the server\[aq]s
configured host address and TCP port (or \f[CR]http://HOST\f[R] if PORT
is 80).
Note this affects url generation but not route parsing.
.TP
\f[CR]\-\-test\f[R]
run hledger\-web\[aq]s tests and exit.
hspec test runner args may follow a \-\-, eg: hledger\-web \-\-test \-\-
\-\-help
.PP
hledger\-web also supports many of hledger\[aq]s general options.
Query options and arguments may be used to set an initial filter, which
although not shown in the UI, will restrict the data shown, in addition
to any search query entered in the UI.
.PP
Note that hledger\-web shows accounts with zero balances by default,
like \f[CR]hledger\-ui\f[R] (and unlike \f[CR]hledger\f[R]).
Using the \f[CR]\-E/\-\-empty\f[R] flag at startup will hide them.
.PP
If you see accounts which appear to have a zero balance, but cannot be
hidden with \f[CR]\-E\f[R]: these have a mixed\-cost balance which looks
like zero when costs are hidden.
Currently hledger\-web does not show costs at all.
.SS General help options
.TP
\f[CR]\-h \-\-help\f[R]
show general or COMMAND help
.TP
\f[CR]\-\-man\f[R]
show general or COMMAND user manual with man
.TP
\f[CR]\-\-info\f[R]
show general or COMMAND user manual with info
.TP
\f[CR]\-\-version\f[R]
show general or ADDONCMD version
.TP
\f[CR]\-\-debug[=N]\f[R]
show debug output (levels 1\-9, default: 1)
.SS General input options
.TP
\f[CR]\-f FILE \-\-file=FILE\f[R]
use a different input file.
For stdin, use \- (default: \f[CR]$LEDGER_FILE\f[R] or
\f[CR]$HOME/.hledger.journal\f[R])
.TP
\f[CR]\-\-rules\-file=RULESFILE\f[R]
Conversion rules file to use when reading CSV (default: FILE.rules)
.TP
\f[CR]\-\-separator=CHAR\f[R]
Field separator to expect when reading CSV (default: \[aq],\[aq])
.TP
\f[CR]\-\-alias=OLD=NEW\f[R]
rename accounts named OLD to NEW
.TP
\f[CR]\-\-pivot FIELDNAME\f[R]
use some other field or tag for the account name
.TP
\f[CR]\-I \-\-ignore\-assertions\f[R]
disable balance assertion checks (note: does not disable balance
assignments)
.TP
\f[CR]\-s \-\-strict\f[R]
do extra error checking (check that all posted accounts are declared)
.SS General reporting options
.TP
\f[CR]\-b \-\-begin=DATE\f[R]
include postings/txns on or after this date (will be adjusted to
preceding subperiod start when using a report interval)
.TP
\f[CR]\-e \-\-end=DATE\f[R]
include postings/txns before this date (will be adjusted to following
subperiod end when using a report interval)
.TP
\f[CR]\-D \-\-daily\f[R]
multiperiod/multicolumn report by day
.TP
\f[CR]\-W \-\-weekly\f[R]
multiperiod/multicolumn report by week
.TP
\f[CR]\-M \-\-monthly\f[R]
multiperiod/multicolumn report by month
.TP
\f[CR]\-Q \-\-quarterly\f[R]
multiperiod/multicolumn report by quarter
.TP
\f[CR]\-Y \-\-yearly\f[R]
multiperiod/multicolumn report by year
.TP
\f[CR]\-p \-\-period=PERIODEXP\f[R]
set start date, end date, and/or reporting interval all at once using
period expressions syntax
.TP
\f[CR]\-\-date2\f[R]
match the secondary date instead (see command help for other effects)
.TP
\f[CR]\-\-today=DATE\f[R]
override today\[aq]s date (affects relative smart dates, for
tests/examples)
.TP
\f[CR]\-U \-\-unmarked\f[R]
include only unmarked postings/txns (can combine with \-P or \-C)
.TP
\f[CR]\-P \-\-pending\f[R]
include only pending postings/txns
.TP
\f[CR]\-C \-\-cleared\f[R]
include only cleared postings/txns
.TP
\f[CR]\-R \-\-real\f[R]
include only non\-virtual postings
.TP
\f[CR]\-NUM \-\-depth=NUM\f[R]
hide/aggregate accounts or postings more than NUM levels deep
.TP
\f[CR]\-E \-\-empty\f[R]
show items with zero amount, normally hidden (and vice\-versa in
hledger\-ui/hledger\-web)
.TP
\f[CR]\-B \-\-cost\f[R]
convert amounts to their cost/selling amount at transaction time
.TP
\f[CR]\-V \-\-market\f[R]
convert amounts to their market value in default valuation commodities
.TP
\f[CR]\-X \-\-exchange=COMM\f[R]
convert amounts to their market value in commodity COMM
.TP
\f[CR]\-\-value\f[R]
convert amounts to cost or market value, more flexibly than \-B/\-V/\-X
.TP
\f[CR]\-\-infer\-equity\f[R]
infer conversion equity postings from costs
.TP
\f[CR]\-\-infer\-costs\f[R]
infer costs from conversion equity postings
.TP
\f[CR]\-\-infer\-market\-prices\f[R]
use costs as additional market prices, as if they were P directives
.TP
\f[CR]\-\-forecast\f[R]
generate transactions from periodic rules,
between the latest recorded txn and 6 months from today,
or during the specified PERIOD (= is required).
Auto posting rules will be applied to these transactions as well.
Also, in hledger\-ui make future\-dated transactions visible.
.TP
\f[CR]\-\-auto\f[R]
generate extra postings by applying auto posting rules to all txns (not
just forecast txns)
.TP
\f[CR]\-\-verbose\-tags\f[R]
add visible tags indicating transactions or postings which have been
generated/modified
.TP
\f[CR]\-\-commodity\-style\f[R]
Override the commodity style in the output for the specified commodity.
For example \[aq]EUR1.000,00\[aq].
.TP
\f[CR]\-\-color=WHEN (or \-\-colour=WHEN)\f[R]
Should color\-supporting commands use ANSI color codes in text output.
\[aq]auto\[aq] (default): whenever stdout seems to be a
color\-supporting terminal.
\[aq]always\[aq] or \[aq]yes\[aq]: always, useful eg when piping output
into \[aq]less \-R\[aq].
\[aq]never\[aq] or \[aq]no\[aq]: never.
A NO_COLOR environment variable overrides this.
.TP
\f[CR]\-\-pretty[=WHEN]\f[R]
Show prettier output, e.g.
using unicode box\-drawing characters.
Accepts \[aq]yes\[aq] (the default) or \[aq]no\[aq] (\[aq]y\[aq],
\[aq]n\[aq], \[aq]always\[aq], \[aq]never\[aq] also work).
If you provide an argument you must use \[aq]=\[aq], e.g.
\[aq]\-\-pretty=yes\[aq].
.PP
When a reporting option appears more than once in the command line, the
last one takes precedence.
.PP
Some reporting options can also be written as query arguments.
.SH PERMISSIONS
By default, hledger\-web allows anyone who can reach it to view the
journal and to add new transactions, but not to change existing data.
.PP
You can restrict who can reach it by
.IP \[bu] 2
setting the IP address it listens on (see \f[CR]\-\-host\f[R] above).
By default it listens on 127.0.0.1, accessible to all users on the local
machine.
.IP \[bu] 2
putting it behind an authenticating proxy, using eg apache or nginx
.IP \[bu] 2
custom firewall rules
.PP
You can restrict what the users who reach it can do, by
.IP \[bu] 2
using the \f[CR]\-\-capabilities=CAP[,CAP..]\f[R] flag when you start
it, enabling one or more of the following capabilities.
The default value is \f[CR]view,add\f[R]:
.RS 2
.IP \[bu] 2
\f[CR]view\f[R] \- allows viewing the journal file and all included
files
.IP \[bu] 2
\f[CR]add\f[R] \- allows adding new transactions to the main journal
file
.IP \[bu] 2
\f[CR]manage\f[R] \- allows editing, uploading or downloading the main
or included files
.RE
.IP \[bu] 2
using the \f[CR]\-\-capabilities\-header=HTTPHEADER\f[R] flag to specify
a HTTP header from which it will read capabilities to enable.
hledger\-web on Sandstorm uses the X\-Sandstorm\-Permissions header to
integrate with Sandstorm\[aq]s permissions.
This is disabled by default.
.SH EDITING, UPLOADING, DOWNLOADING
If you enable the \f[CR]manage\f[R] capability mentioned above,
you\[aq]ll see a new \[dq]spanner\[dq] button to the right of the search
form.
Clicking this will let you edit, upload, or download the journal file or
any files it includes.
.PP
Note, unlike any other hledger command, in this mode you (or any
visitor) can alter or wipe the data files.
.PP
Normally whenever a file is changed in this way, hledger\-web saves a
numbered backup (assuming file permissions allow it, the disk is not
full, etc.)
hledger\-web is not aware of version control systems, currently; if you
use one, you\[aq]ll have to arrange to commit the changes yourself (eg
with a cron job or a file watcher like entr).
.PP
Changes which would leave the journal file(s) unparseable or non\-valid
(eg with failing balance assertions) are prevented.
(Probably.
This needs re\-testing.)
.SH RELOADING
hledger\-web detects changes made to the files by other means (eg if you
edit it directly, outside of hledger\-web), and it will show the new
data when you reload the page or navigate to a new page.
If a change makes a file unparseable, hledger\-web will display an error
message until the file has been fixed.
.PP
(Note: if you are viewing files mounted from another machine, make sure
that both machine clocks are roughly in step.)
.SH JSON API
In addition to the web UI, hledger\-web also serves a JSON API that can
be used to get data or add new transactions.
If you want the JSON API only, you can use the \f[CR]\-\-serve\-api\f[R]
flag.
Eg:
.IP
.EX
$ hledger\-web \-f examples/sample.journal \-\-serve\-api
\&...
.EE
.PP
You can get JSON data from these routes:
.IP
.EX
/version
/accountnames
/transactions
/prices
/commodities
/accounts
/accounttransactions/ACCOUNTNAME
.EE
.PP
Eg, all account names in the journal (similar to the accounts command).
(hledger\-web\[aq]s JSON does not include newlines, here we use python
to prettify it):
.IP
.EX
$ curl \-s http://127.0.0.1:5000/accountnames | python \-m json.tool
[
    \[dq]assets\[dq],
    \[dq]assets:bank\[dq],
    \[dq]assets:bank:checking\[dq],
    \[dq]assets:bank:saving\[dq],
    \[dq]assets:cash\[dq],
    \[dq]expenses\[dq],
    \[dq]expenses:food\[dq],
    \[dq]expenses:supplies\[dq],
    \[dq]income\[dq],
    \[dq]income:gifts\[dq],
    \[dq]income:salary\[dq],
    \[dq]liabilities\[dq],
    \[dq]liabilities:debts\[dq]
]
.EE
.PP
Or all transactions:
.IP
.EX
$ curl \-s http://127.0.0.1:5000/transactions | python \-m json.tool
[
    {
        \[dq]tcode\[dq]: \[dq]\[dq],
        \[dq]tcomment\[dq]: \[dq]\[dq],
        \[dq]tdate\[dq]: \[dq]2008\-01\-01\[dq],
        \[dq]tdate2\[dq]: null,
        \[dq]tdescription\[dq]: \[dq]income\[dq],
        \[dq]tindex\[dq]: 1,
        \[dq]tpostings\[dq]: [
            {
                \[dq]paccount\[dq]: \[dq]assets:bank:checking\[dq],
                \[dq]pamount\[dq]: [
                    {
                        \[dq]acommodity\[dq]: \[dq]$\[dq],
                        \[dq]aismultiplier\[dq]: false,
                        \[dq]aprice\[dq]: null,
\&...
.EE
.PP
Most of the JSON corresponds to hledger\[aq]s data types; for details of
what the fields mean, see the Hledger.Data.Json haddock docs and click
on the various data types, eg Transaction.
And for a higher level understanding, see the journal docs.
.PP
In some cases there is outer JSON corresponding to a \[dq]Report\[dq]
type.
To understand that, go to the Hledger.Web.Handler.MiscR haddock and look
at the source for the appropriate handler to see what it returns.
Eg for \f[CR]/accounttransactions\f[R] it\[aq]s getAccounttransactionsR,
returning a \[dq]\f[CR]accountTransactionsReport ...\f[R]\[dq].
Looking up the haddock for that we can see that /accounttransactions
returns an AccountTransactionsReport, which consists of a report title
and a list of AccountTransactionsReportItem (etc).
.PP
You can add a new transaction to the journal with a PUT request to
\f[CR]/add\f[R], if hledger\-web was started with the \f[CR]add\f[R]
capability (enabled by default).
The payload must be the full, exact JSON representation of a hledger
transaction (partial data won\[aq]t do).
You can get sample JSON from hledger\-web\[aq]s \f[CR]/transactions\f[R]
or \f[CR]/accounttransactions\f[R], or you can export it with
hledger\-lib, eg like so:
.IP
.EX
\&.../hledger$ stack ghci hledger\-lib
>>> writeJsonFile \[dq]txn.json\[dq] (head $ jtxns samplejournal)
>>> :q
.EE
.PP
Here\[aq]s how it looks as of hledger\-1.17 (remember, this JSON
corresponds to hledger\[aq]s Transaction and related data types):
.IP
.EX
{
    \[dq]tcomment\[dq]: \[dq]\[dq],
    \[dq]tpostings\[dq]: [
        {
            \[dq]pbalanceassertion\[dq]: null,
            \[dq]pstatus\[dq]: \[dq]Unmarked\[dq],
            \[dq]pamount\[dq]: [
                {
                    \[dq]aprice\[dq]: null,
                    \[dq]acommodity\[dq]: \[dq]$\[dq],
                    \[dq]aquantity\[dq]: {
                        \[dq]floatingPoint\[dq]: 1,
                        \[dq]decimalPlaces\[dq]: 10,
                        \[dq]decimalMantissa\[dq]: 10000000000
                    },
                    \[dq]aismultiplier\[dq]: false,
                    \[dq]astyle\[dq]: {
                        \[dq]ascommodityside\[dq]: \[dq]L\[dq],
                        \[dq]asdigitgroups\[dq]: null,
                        \[dq]ascommodityspaced\[dq]: false,
                        \[dq]asprecision\[dq]: 2,
                        \[dq]asdecimalpoint\[dq]: \[dq].\[dq]
                    }
                }
            ],
            \[dq]ptransaction_\[dq]: \[dq]1\[dq],
            \[dq]paccount\[dq]: \[dq]assets:bank:checking\[dq],
            \[dq]pdate\[dq]: null,
            \[dq]ptype\[dq]: \[dq]RegularPosting\[dq],
            \[dq]pcomment\[dq]: \[dq]\[dq],
            \[dq]pdate2\[dq]: null,
            \[dq]ptags\[dq]: [],
            \[dq]poriginal\[dq]: null
        },
        {
            \[dq]pbalanceassertion\[dq]: null,
            \[dq]pstatus\[dq]: \[dq]Unmarked\[dq],
            \[dq]pamount\[dq]: [
                {
                    \[dq]aprice\[dq]: null,
                    \[dq]acommodity\[dq]: \[dq]$\[dq],
                    \[dq]aquantity\[dq]: {
                        \[dq]floatingPoint\[dq]: \-1,
                        \[dq]decimalPlaces\[dq]: 10,
                        \[dq]decimalMantissa\[dq]: \-10000000000
                    },
                    \[dq]aismultiplier\[dq]: false,
                    \[dq]astyle\[dq]: {
                        \[dq]ascommodityside\[dq]: \[dq]L\[dq],
                        \[dq]asdigitgroups\[dq]: null,
                        \[dq]ascommodityspaced\[dq]: false,
                        \[dq]asprecision\[dq]: 2,
                        \[dq]asdecimalpoint\[dq]: \[dq].\[dq]
                    }
                }
            ],
            \[dq]ptransaction_\[dq]: \[dq]1\[dq],
            \[dq]paccount\[dq]: \[dq]income:salary\[dq],
            \[dq]pdate\[dq]: null,
            \[dq]ptype\[dq]: \[dq]RegularPosting\[dq],
            \[dq]pcomment\[dq]: \[dq]\[dq],
            \[dq]pdate2\[dq]: null,
            \[dq]ptags\[dq]: [],
            \[dq]poriginal\[dq]: null
        }
    ],
    \[dq]ttags\[dq]: [],
    \[dq]tsourcepos\[dq]: {
        \[dq]tag\[dq]: \[dq]JournalSourcePos\[dq],
        \[dq]contents\[dq]: [
            \[dq]\[dq],
            [
                1,
                1
            ]
        ]
    },
    \[dq]tdate\[dq]: \[dq]2008\-01\-01\[dq],
    \[dq]tcode\[dq]: \[dq]\[dq],
    \[dq]tindex\[dq]: 1,
    \[dq]tprecedingcomment\[dq]: \[dq]\[dq],
    \[dq]tdate2\[dq]: null,
    \[dq]tdescription\[dq]: \[dq]income\[dq],
    \[dq]tstatus\[dq]: \[dq]Unmarked\[dq]
}
.EE
.PP
And here\[aq]s how to test adding it with curl.
This should add a new entry to your journal:
.IP
.EX
$ curl http://127.0.0.1:5000/add \-X PUT \-H \[aq]Content\-Type: application/json\[aq] \-\-data\-binary \[at]txn.json
.EE
.SH DEBUG OUTPUT
.SS Debug output
You can add \f[CR]\-\-debug[=N]\f[R] to the command line to log debug
output.
N ranges from 1 (least output, the default) to 9 (maximum output).
Typically you would start with 1 and increase until you are seeing
enough.
Debug output goes to stderr, interleaved with the requests logged on
stdout.
To capture debug output in a log file instead, you can usually redirect
stderr, eg:
.PD 0
.P
.PD
\f[CR]hledger\-web \-\-debug=3 2>hledger\-web.log\f[R].
.SH ENVIRONMENT
\f[B]LEDGER_FILE\f[R] The main journal file to use when not specified
with \f[CR]\-f/\-\-file\f[R].
Default: \f[CR]$HOME/.hledger.journal\f[R].
.SH BUGS
We welcome bug reports in the hledger issue tracker (shortcut:
http://bugs.hledger.org), or on the #hledger chat or hledger mail list
(https://hledger.org/support).
.PP
Some known issues:
.PP
Does not work well on small screens, or in text\-mode browsers.


.SH AUTHORS
Simon Michael <simon@joyful.com> and contributors.
.br
See http://hledger.org/CREDITS.html

.SH COPYRIGHT
Copyright 2007-2023 Simon Michael and contributors.

.SH LICENSE
Released under GNU GPL v3 or later.

.SH SEE ALSO
hledger(1), hledger\-ui(1), hledger\-web(1), ledger(1)
